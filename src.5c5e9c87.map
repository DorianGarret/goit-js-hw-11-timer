{"version":3,"sources":["js/countdown-timer.js","js/timer.js","index.js"],"names":["CountdownTimer","selector","targetDate","onTick","deltaTime","time","currentTime","Date","now","getTimeComponents","days","pad","Math","floor","hours","mins","secs","value","String","padStart","timer","updateClockInterface","document","querySelectorAll","forEach","event","dataset","textContent","start"],"mappings":";;;AAAaA,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAN,MAAMA,EACG,aAAA,SAAEC,EAAF,WAAYC,EAAZ,OAAwBC,IAC3BD,KAAAA,WAAaA,EACbD,KAAAA,SAAWA,EACXE,KAAAA,OAASA,EACTC,KAAAA,UACAC,KAAAA,KAGD,QACQ,YAAA,KACFC,MAAAA,EAAcC,KAAKC,MACpBJ,KAAAA,UAAY,KAAKF,WAAaI,EAC9BD,KAAAA,KAAO,KAAKI,kBAAkB,KAAKL,WACnCD,KAAAA,OAAO,KAAKE,OAClB,KAGWA,kBAAAA,GAYP,MAAA,CAAEK,KAXI,KAAKC,IAAIC,KAAKC,MAAMR,EAAQ,QAW1BS,MATD,KAAKH,IACfC,KAAKC,MAAOR,EAAQ,MAAyB,OAQ3BU,KALT,KAAKJ,IACdC,KAAKC,MAAOR,EAAQ,KAAoB,MAIhBW,KADf,KAAKL,IAAIC,KAAKC,MAAOR,EAAQ,IAAc,OAIxDY,IAAAA,GACOC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,MAlC5BnB,QAAAA,eAAAA;;AC6Bb,aA7BA,IAAA,EAAA,QAAA,qBAEA,MAAMoB,EAAQ,IAAIpB,EAAJ,eAAmB,CACnB,SAAA,WACE,WAAA,IAAIO,KAAK,0BACbc,OAAAA,IAGZ,SAASA,GAAqB,KAAEX,EAAF,MAAQI,EAAR,KAAeC,EAAf,KAAqBC,IAC9BM,SAASC,iBAAiB,mBAEhCC,QAAQC,IACPA,OAAAA,EAAMC,QAAQT,OACb,IAAA,OACKU,EAAAA,YAAcjB,EACpB,MACC,IAAA,QACKiB,EAAAA,YAAcb,EACpB,MACC,IAAA,OACKa,EAAAA,YAAcZ,EACpB,MACC,IAAA,OACKY,EAAAA,YAAcX,KAMpCI,EAAMQ;;AC5BN,aADA,QAAA,oBACA,QAAA","file":"src.5c5e9c87.map","sourceRoot":"../src","sourcesContent":["export class CountdownTimer {\n    constructor({ selector, targetDate, onTick }) {\n        this.targetDate = targetDate;\n        this.selector = selector;\n        this.onTick = onTick;\n        this.deltaTime;\n        this.time;\n    }\n\n    start() {\n        setInterval(() => {\n            const currentTime = Date.now();\n            this.deltaTime = this.targetDate - currentTime;\n            this.time = this.getTimeComponents(this.deltaTime);\n            this.onTick(this.time);\n        }, 1000);\n    }\n\n    getTimeComponents(time) {\n        const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n\n        const hours = this.pad(\n            Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n        );\n\n        const mins = this.pad(\n            Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)),\n        );\n\n        const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n        return { days, hours, mins, secs };\n    }\n\n    pad(value) {\n        return String(value).padStart(2, '0');\n    }\n}\n","import { CountdownTimer } from './countdown-timer';\n\nconst timer = new CountdownTimer({\n    selector: '#timer-1',\n    targetDate: new Date('Dec 31, 2021, 23:59:00'),\n    onTick: updateClockInterface,\n});\n\nfunction updateClockInterface({ days, hours, mins, secs }) {\n    let timerValue = document.querySelectorAll('#timer-1 .value');\n\n    timerValue.forEach(event => {\n        switch (event.dataset.value) {\n            case 'days':\n                event.textContent = days;\n                break;\n            case 'hours':\n                event.textContent = hours;\n                break;\n            case 'mins':\n                event.textContent = mins;\n                break;\n            case 'secs':\n                event.textContent = secs;\n                break;\n        }\n    });\n}\n\ntimer.start();\n","import './sass/main.scss';\nimport './js/timer';\n"]}